t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulation=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulation=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulation=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulation=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulation=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulation=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Crea un gr√°fico animado para Browniano
p_b <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulation)),
data = df_sim_browniano) +
labs(title = "Simulaciones de Movimiento Browniano") +
theme_minimal() +
transition_states(simulation, transition_length = 2, state_length = 1)
p_s <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulation)),
data = df_sim_sinosoidal) +
labs(title = "Simulaciones de Movimiento Sinosoidal") +
theme_minimal() +
transition_states(simulation, transition_length = 2, state_length = 1)
# Guarda el GIF animado
anim_save("brownian_motion.gif", animate(p), renderer = gifski_renderer())
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulation=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulation=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulation=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Crea un gr√°fico animado para Browniano
p_b <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulation)),
data = df_sim_browniano) +
labs(title = "Simulaciones de Movimiento Browniano") +
theme_minimal() +
transition_states(simulation, transition_length = 2, state_length = 1)
p_s <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulation)),
data = df_sim_sinosoidal) +
labs(title = "Simulaciones de Movimiento Sinosoidal") +
theme_minimal() +
transition_states(simulation, transition_length = 2, state_length = 1)
# Guarda el GIF animado
anim_save("brownian_motion.gif", animate(p_b), renderer = gifski_renderer())
anim_save("sinusoidal_motion.gif", animate(p_s), renderer = gifski_renderer())
knitr::opts_chunk$set(
warning = FALSE,
echo = TRUE,
message = FALSE
)
# Librer√≠as
library(tidyverse)
library(janitor)
library(openxlsx)
library(flextable)
library(viridis)
library(scales)
library(DT)
library(lubridate)
library(gridExtra)
library(stats)
library(ggplot2)
library(gganimate)
source("funciones_personalizadas.R")
# Cargue y limpieza de datos.
# üñáÔ∏è Se genera el vector de meses para usarlo m√°s abajo con la funci√≥n match.
meses <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo",
"Junio", "Julio", "Agosto", "Septiembre", "Octubre",
"Noviembre", "Diciembre")
hass <- read.xlsx("datasets/Hass_Precios_Historicos.xlsx") %>% clean_names()
hass_dia <- hass %>%
mutate(dia = sapply(strsplit(fecha, " "), "[", 3),
mes = sapply(strsplit(fecha, " "), "[", 2),
anio = sapply(strsplit(fecha, " "), "[", 5)) %>%
mutate(anio = as.double(anio)) %>%
# üñá Se utiliza la funci√≥n match con el vector meses.
mutate(mes = match(mes,meses)) %>%
mutate(fecha = ymd(paste(anio, mes, dia, sep = "-")))
dolar <- read.csv2("datasets/Tasa_de_Cambio_Representativa_del__Mercado_-Historico.csv") %>%
clean_names()
# Vamos a sacar un valor promedio de cada variable por mes
# Para el dolar vamos a tomar el campo vigenciadesde
dolar <- dolar %>%
mutate(fecha =  format(as.Date(vigenciadesde, format = "%d/%m/%y"),
format = "%Y-%m-%d")) %>%
mutate(mes = month(fecha), anio = year(fecha)) %>%
mutate(valor = as.double(str_replace(valor,",",""))) %>%
mutate(fecha= ymd(paste(anio, mes, 1, sep = "-"))) %>%
group_by(fecha) %>%
summarise(precio_dolar = mean(valor), .groups = "drop")
print(dolar)
hass_mes <- hass_dia %>%
mutate(fecha = ymd(paste0(anio,"-",mes,"-","01"))) %>%
group_by(fecha) %>%
summarise(precio_aguacate_kg = mean(precio_kg), .groups = "drop")
hass_dolar <- dolar %>%
right_join(hass_mes, by = c("fecha"))
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulacion=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulacion=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Crea un gr√°fico animado para Browniano
p_b <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_browniano) +
labs(title = "Simulaciones de Movimiento Browniano") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
p_s <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_sinosoidal) +
labs(title = "Simulaciones de Movimiento Sinosoidal") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
# Guarda el GIF animado
anim_save("brownian_motion.gif", animate(p_b), renderer = gifski_renderer())
anim_save("sinusoidal_motion.gif", animate(p_s), renderer = gifski_renderer())
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulacion=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulacion=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Crea un gr√°fico animado para Browniano
p_b <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_browniano) +
labs(title = "Simulaciones de Movimiento Browniano") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
p_s <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_sinosoidal) +
labs(title = "Simulaciones de Movimiento Sinosoidal") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
# Guarda el GIF animado
#anim_save("brownian_motion.gif", animate(p_b), renderer = gifski_renderer())
anim_save("sinusoidal_motion.gif", animate(p_s), renderer = gifski_renderer())
# Funci√≥n para simular una trayectoria del movimiento browniano
simular_mov_browniano<- function(n_steps) {
dt <- 1
t <- seq(1, n_steps * dt, by = dt)
x <- cumsum(rnorm(n_steps))
data.frame(t, x)
}
# Funci√≥n para estimar una se√±al sinosoidal estacioaria:
simular_sinosoidal <- function(n_steps){
# Par√°metros del proceso
A <- 1          # Amplitud de la se√±al sinusoidal
f <- 0.1        # Frecuencia de la se√±al sinusoidal
phi <- pi/4     # Fase de la se√±al sinusoidal
ruido <- rnorm(n_steps)
# Generar el proceso
t <- seq(1, n_steps, length.out = n_steps)  # Valores de tiempo
x <- A * sin(2 * pi * f * t + phi) + ruido
data.frame(t,x)
}
# N√∫mero de trayectorias a simular
n_simulations <- 10
# N√∫mero de pasos en cada trayectoria
n_steps <- 1000
# Simula las trayectorias del movimiento browniano
simulaciones_browniano <- lapply(1:n_simulations,
function(i) simular_mov_browniano(n_steps))
simulaciones_sinosoidal <- lapply(1:n_simulations,
function(i) simular_sinosoidal(n_steps))
df_sim_browniano = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
df_sim_sinosoidal = data.frame(
t=numeric(),
x=numeric(),
tipo=character(),
simulacion=numeric()
)
for (i in 1:length(simulaciones_browniano)){
# Para browniano
df_inc_browniano <- data.frame(
t=simulaciones_browniano[[i]]$t,
x=simulaciones_browniano[[i]]$x,
tipo=rep("Movimiento browniano",length(simulaciones_browniano[[i]]$x)),
simulacion=rep(i,length(simulaciones_browniano[[i]]$x))
)
df_sim_browniano <- rbind(df_sim_browniano, df_inc_browniano)
# Para sinosoidal
df_inc_sinosoidal <- data.frame(
t=simulaciones_sinosoidal[[i]]$t,
x=simulaciones_sinosoidal[[i]]$x,
tipo=rep("Movimiento sinosoidal",length(simulaciones_sinosoidal[[i]]$x)),
simulacion=rep(i,length(simulaciones_sinosoidal[[i]]$x))
)
}
# Crea un gr√°fico animado para Browniano
p_b <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_browniano) +
labs(title = "Simulaciones de Movimiento Browniano") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
p_s <- ggplot() +
geom_line(aes(x = t, y = x,
color = factor(simulacion)),
data = df_sim_sinosoidal) +
labs(title = "Simulaciones de Movimiento Sinosoidal") +
theme_minimal() +
transition_states(simulacion, transition_length = 2, state_length = 1)
plot(p_b)
# Guarda el GIF animado
#anim_save("brownian_motion.gif", animate(p_b), renderer = gifski_renderer())
#anim_save("sinusoidal_motion.gif", animate(p_s), renderer = gifski_renderer())
